version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.dashboard.address=:8080"   
      - "--api.dashboard=true"                   
    ports:
      - "80:80"      
      - "8080:8080" 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN_NAME}`)" 
      - "traefik.http.routers.traefik-dashboard.entrypoints=web"  
      - "traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080" 
  db:
    image: postgres:13
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./database:/var/lib/postgresql/data
      # init schema
    ports:
      - '7519:5432'
  backend-main:
    build:
      context: .
      dockerfile: Dockerfile
    # restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      - db
    command: >
      sh -c "
      npx prisma migrate deploy &&
      npm run start"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`deploy-api.${DOMAIN_NAME}`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
  frontend-main:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        PROTOCOL: ${PROTOCOL}
        DOMAIN_NAME: ${DOMAIN_NAME}
    restart: unless-stopped
    depends_on:
      - backend-main
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`deploy.${DOMAIN_NAME}`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

volumes:
  db-data:
