services:
  traefik:
    build:
      context: .
      dockerfile: Dockerfile.traefik
      args:
        DOMAIN_NAME: ${DOMAIN_NAME}
    image: traefik-envsubst
    container_name: traefik
    restart: always
    command:
      - '--entrypoints.web.address=:80'
      # - '--providers.docker=true'
      # - '--providers.docker.exposedbydefault=false'
      - '--api.dashboard=true'
      - '--api.insecure=true' # Dashboard accessible without authentication
      - '--providers.file.filename=/etc/traefik/dynamic.yml'
      - '--log.level=DEBUG'
    ports:
      - '80:80'
    volumes:
      - './dynamic.yml.template:/etc/traefik/dynamic.yml.template'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
  db:
    image: postgres:13
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./database:/var/lib/postgresql/data
      # init schema
    ports:
      - '7519:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
  backend-main:
    build:
      context: .
      dockerfile: Dockerfile
    # restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./service:/app/service
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
      npx prisma migrate deploy &&
      npm run start"
    privileged: true
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend.rule=Host(`deploy-api.${DOMAIN_NAME}`)'
      - 'traefik.http.services.backend.loadbalancer.server.port=3000'
  frontend-main:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        PROTOCOL: ${PROTOCOL}
        DOMAIN_NAME: ${DOMAIN_NAME}
    restart: unless-stopped
    depends_on:
      - backend-main
    env_file:
      - .env
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`deploy.${DOMAIN_NAME}`)'
      - 'traefik.http.services.frontend.loadbalancer.server.port=3000'
